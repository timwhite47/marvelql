type Character implements Node {
  # Marvel API ID
  id: ID!

  # Name of character
  name: String

  # A short bio or description of the character.
  description: String

  # The date the resource was most recently modified.
  modified: String

  # The canonical URL identifier for this resource
  resourceURI: String
  thumbnail: String

  # Comics the character appears in.
  comics(
    after: String
    first: Int
    before: String
    last: Int

    # Search String to look up characters
    search: String
  ): ComicConnection

  # Series that the character is in.
  series(
    after: String
    first: Int
    before: String
    last: Int

    # Search String to look up characters
    search: String
  ): SeriesConnection
  events(
    after: String
    first: Int
    before: String
    last: Int

    # Search String to look up characters
    search: String
  ): EventConnection
}

# A connection to a list of items.
type CharacterConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CharacterEdge]
}

# An edge in a connection.
type CharacterEdge {
  # The item at the end of the edge
  node: Character

  # A cursor for use in pagination
  cursor: String!
}

type Comic {
  # Marvel API ID
  id: ID

  # Digital Comic ID
  digitalId: String

  # The canonical id of the comic
  title: String

  # The number of the issue in the series (will generally be 0 for collection formats)
  issueNumber: Int

  #  The publication format of the comic e.g. comic, hardcover, trade paperback.
  format: String

  # Series that comic belongs to.
  series: Series

  # A list of promotional images associated with this comic.
  images: [Image]

  # The representative image for this comic
  thumbnail: Image

  # A set of public web site URLs for the resource
  urls: [URL]

  # Characters appearing in comic
  characters(
    after: String
    first: Int
    before: String
    last: Int

    # Search String to look up characters
    search: String
  ): CharacterConnection
}

# A connection to a list of items.
type ComicConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ComicEdge]
}

# An edge in a connection.
type ComicEdge {
  # The item at the end of the edge
  node: Comic

  # A cursor for use in pagination
  cursor: String!
}

type Event {
  # Marvel API ID
  id: ID!

  # Title of Event
  title: String

  # Description of Event
  description: String

  # A set of public web site URLs for the event
  urls: [URL]

  # Start Date of Event
  start: String

  # End Date of Event
  end: String

  # The representative image for this event
  thumbnail: Image

  # Comics included in this event.
  comics(
    after: String
    first: Int
    before: String
    last: Int

    # Search String to look up characters
    search: String
  ): ComicConnection

  # Characters involved in event
  characters(
    after: String
    first: Int
    before: String
    last: Int

    # Search String to look up characters
    search: String
  ): CharacterConnection
}

# A connection to a list of items.
type EventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [EventEdge]
}

# An edge in a connection.
type EventEdge {
  # The item at the end of the edge
  node: Event

  # A cursor for use in pagination
  cursor: String!
}

type Image {
  url: String
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
  character(
    # Marvel API Character ID
    id: String
  ): Character
  comic(
    # Marvel API Comic ID
    id: String
  ): Comic
  series(
    # Marvel API Series ID
    id: String
  ): Series
}

type Series {
  # The id of the series
  id: String

  # The name of the series
  title: String

  # A description of the series.
  description: String

  # A set of public web site URLs for the resource
  urls: [URL]

  # The first year of publication for the series
  startYear: Int

  # The last year of publication for the series (conventionally, 2099 for ongoing series)
  endYear: Int

  # The age-appropriateness rating for the series
  rating: String
  modified: String

  # The representative image for this series
  thumbnail: Image

  # A resource list containing comics in this series
  comics(
    after: String
    first: Int
    before: String
    last: Int

    # Search String to look up characters
    search: String
  ): ComicConnection

  # Events the character is involved in
  events(
    after: String
    first: Int
    before: String
    last: Int

    # Search String to look up characters
    search: String
  ): EventConnection
}

# A connection to a list of items.
type SeriesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SeriesEdge]
}

# An edge in a connection.
type SeriesEdge {
  # The item at the end of the edge
  node: Series

  # A cursor for use in pagination
  cursor: String!
}

type URL {
  # A text identifier for the URL
  type: String

  # A full URL (including scheme, domain, and path)
  url: String
}

type Viewer {
  comics(
    after: String
    first: Int
    before: String
    last: Int

    # Search String to look up characters
    search: String
  ): ComicConnection
  series(
    after: String
    first: Int
    before: String
    last: Int

    # Search String to look up characters
    search: String
  ): SeriesConnection
  events(
    after: String
    first: Int
    before: String
    last: Int

    # Search String to look up characters
    search: String
  ): EventConnection
  characters(
    after: String
    first: Int
    before: String
    last: Int

    # Search String to look up characters
    search: String
  ): CharacterConnection
}
